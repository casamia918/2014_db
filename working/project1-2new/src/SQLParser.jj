/* SQLParser.jj : An SQL Parsing program */



///////////////* project1-2 new */////////////
///////////////* project1-2 new */////////////
///////////////* project1-2 new */////////////



options {
	STATIC = false;
	ERROR_REPORTING = true;
}

PARSER_BEGIN(SQLParser)

	import com.sleepycat.je.*;
	
	import java.io.File;
	import java.util.*;
	import java.util.Map.*;

	
	class SQLParser {

		public static final boolean NOT_READONLY = false;
		public static final boolean READONLY = true;
		
		public static final int COLNAME = 0;
		public static final int DATATYPE = 1;
		public static final int NULLITY = 2;
		public static final int KEYTYPE = 3;
		
		public static final int FORCOL = 0;
		public static final int REFEDTABLENAME = 1;
		public static final int REFEDCOL = 2;
		
		public static final int SUBJECT = 1;
		public static final int OBJECT_TABLENAME = 2;
		public static final int OBJECT = 3;
		
		
		private static File myEnvPath = new File("./db");
		private static DatabaseEntry theKey = new DatabaseEntry();
		private static DatabaseEntry theData = new DatabaseEntry();
		private static Cursor thisDbCursor = null;
		private static OperationStatus retVal;
	
		private static MyEnv myEnv = new MyEnv(); 
		public static String myID = "SQL_************> ";
		private static SQLParser myParser;
		
		String thisTableName;
		String refedTableName;
		int pkDefOccur;
		int fkDefOccur;
		int colDefOccur;
		int refingPtOccur;
		int refedPtOccur;
		
		public static final String COLDEF_PREFIX = "@cd";
		public static final String FORKEY_PREFIX = "#fk";
		public static final String PRIKEY_PREFIX = "*pk";
		public static final String TUPLE_PREFIX = "=tp";
		public static final String REFINGPT_PREFIX = "!ref->";
		public static final String REFEDPT_PREFIX = "!ref<-"; 
		
		// Hash variable : To store each kind of key/value sets.
		// Each kind's key are attached by discrimination prefix.
		// refedPtHash is storing each table's referenced information 
		// To specify table, this hash is declared by 2 dimension hash.
		// key1 : refed table name, 
		// key2 : refed Col name, value2 : refing col name
		HashMap<String, String> thisKVHash;
		HashMap<String, String> thisConstraintHash;
		HashMap<String, String> thisColDefHash; //key Prefix : @cd
		HashMap<String, String> thisFkDefHash; //key Prefix : #fk
		
		ArrayList<String> thisRefingPtArr; //key Prefix : !ref->
		ArrayList<String> thisRefedPtArr; //key Prefix : !ref<-
		HashMap<String, ArrayList<String> > thisRefedPtHash; 
		
		ArrayList<String> priColList; 
		ArrayList<String> forColList;
		ArrayList<String> insColList;
		ArrayList<String> insValList;
		
		ArrayList<String> refedTableList;
		ArrayList<String> refedColList;
		
		

		
		
		public static void main (String[] args)  {
			try {
				myEnv.setup(myEnvPath, false);
				initiate();
	    	} finally {
				myEnv.close();
			}
		}
		
		public static void initiate() {
			System.out.println(myID);
			myParser = new SQLParser(System.in) ;
	    	myParser.run();
		}
		
		public void run() {
			try {
				myParser.Command();
			} catch (TokenMgrError tme) {
				System.out.println("SyntaxError");
				initiate();
			} catch (ParseException pe) {
				System.out.println("SyntaxError");
				initiate();
			} catch (Exception e) {
				System.out.println("UndefinedError : " + e.toString() );
				e.printStackTrace();
				initiate();
			}
		}
		
		public static void printMessage(String msg) {
			System.out.println(myID + msg);
		}
		
		public static String autoCaseModify(Collection<String> compList, String name) {
			Iterator<String> it = compList.iterator();
			while(it.hasNext() ){
				String nameIt = it.next();
				if ( name.equalsIgnoreCase( nameIt ) ) {
					return nameIt;
				}
			}
			return null;
			
		}
		
		
		
		



/*
			< column definition manipulation method >

	Every column definition related variables are handled by these methods.
			
	getter : getColDef, getColDefAttr
	modifier : modifyColAttr, mergeToColDef
  	(setting column definition method is declared in constraint manipulation part)
  			 
*/
		
		public String getColDef(HashMap<String,String> _constraintHash, String colName)
				throws SQLException {
			String[] searched = getConstraintWithName(_constraintHash, COLDEF_PREFIX, colName);
			if (searched != null) {
				return searched[2]; 
			} else {
				throw new SQLException("Has no column defnitio with that column name : " + colName);
			}
		} 
		
		public String getColDefAttr(String colDef, int kind) {
			String[] attr = colDef.split(" ");
			return attr[kind];
		}
		
		public String modifyColDefAttr(String colDef, int kind, String newAttr) {
			String[] attr = colDef.split(" ");
            attr[kind] = newAttr; // type check need
            String newColDef = attr[0];
            for(int i=1; i<4; i++){
            	newColDef = newColDef.concat(" "+attr[i]);
            }
            return newColDef;
		} 
		
		public String mergeToColDef(String colName, String dataType, String nullity, String keyType) {
			return new String(colName +" " + dataType + " " + nullity + " " + keyType); 
		}
		
		
		
/*
			< foreign key manipulation method >
			
	Every foreign key related variables are handled by these methods.
	Foreign keys are composed by 3 parts

	foreign key (<COLUMN_NAME_LIST>) referenced <REFED_TABLENAME> (<COLUMN_NAME_LIST>)
	  				forColList				   refedTableName  refedColList
			
	getter : getForKey, getForColList, getRefedTableName, getRefedColList
  	modifier : partoToForKey (to aggregate foreign key information into one string),
  	(setting foreign key method is declared in constraint manipulation part)
	
	( for : foreign, col : column, refed : referenced, refing : referencing)
*/

		public String getFKDef(HashMap<String,String> _constraintHash, int id) 
				throws SQLException { // id >= 1
			String[] searched = 
			getConstraintWithId(_constraintHash, FORKEY_PREFIX, id );
			if(searched!=null) {
				return searched[2];
			} else {
				throw new SQLException("Has no foreign key with that id : " + id);
			}
			 
		}
		
		private String getFKDefPart(String fkDef, int part) {
			String[] fkDefArr = fkDef.split(" ");
			return fkDefArr[part];
		}
		
		public ArrayList<String> getForColList (String fkDef) {
			String forCol = getFKDefPart(fkDef, FORCOL);
			String[] forColArr = forCol.split(",");
			return new ArrayList<String>(Arrays.asList(forColArr));
		}
		
		public String getRefedTableName (String fkDef) {
			return getFKDefPart(fkDef, REFEDTABLENAME);
		}
		
		public ArrayList<String> getRefedColList (String fkDef) {
			String refedCol = getFKDefPart(fkDef, REFEDCOL);
			String[] refedColArr = refedCol.split(",");
			return new ArrayList<String>(Arrays.asList(refedColArr));
		}
		
		public String mergeToFKDef (ArrayList<String> forColList, 
								String refedTableName, 
								ArrayList<String> refedColList ) {
		
			String fk = new String();	
			for(int i=0; i<forColList.size(); i++) {
				fk = fk.concat(forColList.get(i) + ",");
			}
			fk = fk.substring(0, fk.length()-1);
			
			fk = fk.concat(" " + refedTableName + " ");
			
			for(int i=0; i<refedColList.size(); i++) {
				fk =fk.concat(refedColList.get(i) + ",");
			}
			fk = fk.substring(0, fk.length()-1);
			
			return fk;
		}
		
/*
			< constraint manipulation method >
	
	Constraint definition like column definition or foreign key definition are
	manipulated by these method 		
	
	getter : getConstarintWithName, getConstraintWithId
	setter : setConstraint (Key is generated by mergeToConstraintKey)
	modifier : mergeToConstraintKey (Key is combined with prefix, id, name)

*/		
		public String[] getConstraintWithName
				(HashMap<String, String> _constraintHash, String prefix, String name) 
				throws SQLException {
			//result[0] : id
			//result[1] : name
			//result[2] : definition value
			String[] result = new String[3];
			
			// this method is not allowed to refing hash or refed hash
			// because they uses duplicated names
			if(prefix.equals(REFINGPT_PREFIX) || prefix.equals(REFEDPT_PREFIX) ) {
				throw new SQLException("Getting Refing Pointer and Refed Pointer must use its own method");
			} 

			// assume colName is unique
			for (String itStr : _constraintHash.keySet() ) {
				String[] splited = itStr.split(" ");
				if ( prefix.equals(splited[0]) && name.equalsIgnoreCase(splited[2]) ) {
					
					result[0] = splited[1];
					result[1] = splited[2]; 
					result[2] = _constraintHash.get(itStr); 
					return result;
				}
			}
			return null;
		}
		
		public String[] getConstraintWithId
				(HashMap<String, String> _constraintHash, String prefix, int id) {
			//result[0] : id
			//result[1] : name
			//result[2] : definition value
			String[] result = new String[3];
			
			for (String itStr : _constraintHash.keySet() ) {
				// splited[0] : prefix, splited[1] : id, splited[2] : "null"
				String[] splited = itStr.split(" ");
				if ( prefix.equals(splited[0]) && id == Integer.parseInt(splited[1]) ) {
					result[0] = splited[1];
					result[1] = splited[2]; 
					result[2] = _constraintHash.get(itStr); 
					return result;
				}
			}
			return null;
		}
		
		public void setConstraint 
			(HashMap<String,String> _constraintHash, String constKey, String constDef) {
			_constraintHash.put( constKey , constDef);
		}
		
		public String mergeToConstraintKey(String prefix, int id, String name) {
			return new String(prefix + " " + id + " " + name);
		}
		


/*
			< Reference pointer manipulation method >
	
	By defining foreign key constraint, reference relationship is created.
	Reference pointer is composed by three strings parts.
	
		refPt = subjectCol + " " + String objTable+ " " String objectCol
		
	When refPt is refingPt, then each part refers to refingColName, refedTableName, refedColName
	When refPt is refedPt, then each part refers to refedColName, refingTableName, refingColName
	
	Reference pointer is stored in refPtArr, which type is ArrayList<String>.
	This means reference pointer doesn't need to distinguish key and value.
	
	getter : getRefPtArrFromHash
			 getRefPtByKind
			 getRefPtPart
	setter : no need to define
	modifier : mergeToRefPt 
	

*/

		public ArrayList<String> getRefPtArrFromHash(HashMap<String,String> refPtHash, String prefix) {
		
			ArrayList<String> result = new ArrayList<String>() ;
			
			for(Entry<String,String> entry : refPtHash.entrySet() ) {
                String nowKey = entry.getKey();
                String[] splited = nowKey.split(" ");
                if( prefix.equals(splited[0]) ) {
                    result.add(nowKey);
                }
            }
			return result;
		}
				
		public ArrayList<String> getRefPtByKind
					(ArrayList<String> refPtArr, int kind, String arg) {
			ArrayList<String> result = new ArrayList<String>();
			for(String nowRefPt : refPtArr) {
				if( arg.equalsIgnoreCase( getRefPtPart(nowRefPt, kind) ) ) {
					result.add(nowRefPt);
				}
			}
			return result;
		}
		
		
		String getRefPtPart(String refPt, int part) {
			// 0 : prefix
			// 1 : subjectCOl
			// 2 : objectTable
			// 3 : objectCol
			String[] splited = refPt.split(" ");
			if(part < splited.length) {
				return splited[part];
			} else {
				return null;
			}
		}
		
		String mergeToRefPt(String prefix, String subjectCol, String objectTable, String objectCol) {
			return new String(prefix + " " + subjectCol + " " + objectTable + " " + objectCol ); 
		}

		
/*
			< Hash map read method >
	
	HashMap which stores sql queries are read by these method.
	
	getter : getAllHashFromDb, getHashKindOf

*/
		
		public HashMap<String,String> getAllHashFromDb (Database targetDb) 
			throws SQLException, Exception {
			
			HashMap<String,String> resultHash = new HashMap<String,String>();
			
	        Cursor cursor = targetDb.openCursor(null,null); // assume targetDb is not null
	
	        try {
		        retVal = cursor.getFirst(theKey, theData, LockMode.DEFAULT);
		        while(retVal == OperationStatus.SUCCESS) {
		        	String nowKey = new String(theKey.getData(), "UTF-8");
		        	String nowData = new String(theData.getData(), "UTF-8");
		        	resultHash.put(nowKey, nowData);
		        	
		        	retVal = cursor.getNext(theKey, theData, LockMode.DEFAULT);
		        }
	        } finally {
	        	cursor.close();
	        }
	        
	        if(resultHash.size() == 0 ) {
        		throw new SQLException("Has no DataEntry in " + targetDb.getDatabaseName() );
        	}
	        
	        return resultHash;
		}
		
		public HashMap<String,String> getHashKindOf(HashMap<String,String> sourceHash, String prefix) 
                		throws SQLException {
        	
        	HashMap<String,String> resultHash = new HashMap<String,String>();
        	
        	Iterator<Entry<String,String> > it = sourceHash.entrySet().iterator();
        	while(it.hasNext()) {
        		Entry<String,String> thisEntry = it.next(); 
        		String thisKey = thisEntry.getKey();
        		String thisValue = thisEntry.getValue();
        		if(thisKey.startsWith(prefix)) {
        			resultHash.put(thisKey, thisValue);
        		}
        	}
        	
        	if(resultHash.size() == 0 ) {
        		throw new SQLException("Has no such kind of " + prefix);
        	}

            return resultHash;

        }
		
	}

PARSER_END(SQLParser)





//**************************************************************************//
//************************** regular expression ****************************//
//**************************************************************************//

TOKEN : { < UNDERSCORE : "_" > } 
TOKEN : { < LEFT_PAREN : "(" > } 
TOKEN : { < RIGHT_PAREN : ")" > }
TOKEN : { < COMMA : "," > }
TOKEN : { < SEMICOLON : ";" > }
TOKEN : { < PERIOD : "." > }
TOKEN : { < STAR : "*" > }
TOKEN : { < QUOTE : "'" > }
TOKEN : { < SIGN : ["+", "-"] > }
TOKEN : { < COMP_OP : "<" | ">" | "=" | ">=" | "<=" | "!=" > }

// Non-tokenized words.
SKIP : { < SPACE : " " | "\t" | "\r" | "\n" | "\r\n"  > }

TOKEN : { < #NON_QUOTE_SPECIAL_CHARACTER : ~["'", "\""] > }
TOKEN : { < #DIGIT : ["0"-"9"] > }
TOKEN : { < #ALPHABET : ["a"-"z", "A"-"Z"] > }
TOKEN : { < #NON_QUOTE_CHARACTER : < DIGIT > | < ALPHABET > | < SPACE > | < NON_QUOTE_SPECIAL_CHARACTER > > }

TOKEN : { < CHAR_STRING :  < QUOTE > (< NON_QUOTE_CHARACTER >)* < QUOTE > > }
TOKEN : { < INT_VALUE : (< SIGN >)? < DIGIT > (< DIGIT >)* > }
TOKEN : { < DATE_VALUE : < NNNN > "-" < NN > "-" < NN > > }
TOKEN : { < #NNNN : < DIGIT >< DIGIT >< DIGIT >< DIGIT > > }
TOKEN : { < #NN : < DIGIT >< DIGIT > > }

// Reserve words
// Some words are especially need to define with <SPACE> token 
// to differentiate it from other tokens when other tokens are non-alphabet word. 
TOKEN  : {
  < SELECT : "select">
| < FROM : "from" > 
| < WHERE : "where" > 
| < CREATE : "create" >
| < TABLE : "table"> 
| < IS : "is" > 
| < NOT : <SPACE> "not" >
| < AND : <SPACE> "and" <SPACE> > 
| < OR : <SPACE> "or" <SPACE> > 
| < INSERT : "insert" > 
| < INTO : "into" > 
| < DELETE : "delete" > 
| < NULL : "null" >
| < DESC : "desc" >
| < DROP : "drop" >
| < SHOW : "show" >
| < TABLES : "tables" > 
| < VALUES : <SPACE> "values" >
| < AS : "as" >
| < PRIMARY : "primary" > 
| < FOREIGN : "foreign" >
| < KEY : "key" >
| < INT : "int" >
| < CHAR : "char" >
| < DATE : "date" >
| < REFERENCES : <SPACE> "references" > 
| < EXIT : "exit"  >
}

// Legal identifier regular expression.
// Legal identifier is checked if it is reserve words while in token generation process.
// Reserve words checking is worked by case insensitively, using String.toLowerCase() method.
TOKEN :
{	 
	< LEGAL_IDENTIFIER : < ALPHABET > ( < ALPHABET > | < UNDERSCORE > )*>  
	{
		Token t = matchedToken;
		String s = t.image.toLowerCase();
		
		String[] reserves = {
			"select", 
			"from", 
			"where", 
			"create", 
			"table", 
			"is", 
			"not",
			"and", 
			"or", 
			"insert", 
			"into", 
			"delete", 
			"null", 
			"desc", 
			"drop", 
			"show", 
			"tables", 
			"values", 
			"as", 
			"primary",  
			"foreign", 
			"key", 
			"int", 
			"char", 
			"date", 
			"references", 
			"exit"
		};

		int i=0;
		while(i<reserves.length) {
			if( s.equals( reserves[i] ) ) {
				throw new TokenMgrError();
			}
			i++;
		}
	}
}




//**************************************************************************//
//************************** BNF production ********************************//
//**************************************************************************//







//******************* Query *******************//

void Command() throws Exception  :
{}
{
	LOOKAHEAD ( < EXIT > )
	< EXIT > < SEMICOLON > 
	|
	QueryList()
	< EXIT > < SEMICOLON >
	
	
}

void QueryList() throws Exception :
{}
{
	(
	  TryQuery()
	  {
	  	System.out.println(myID);
	  }
	)+
}

void TryQuery() throws Exception :
{}
{
	try {
	(
		Query()
	)
	} catch (SQLException se) {
		System.out.println(se.toString());
		se.printStackTrace(); // remove later
	} catch (DatabaseException dbe) {
		System.err.println(dbe.toString());
	} 
	
}

JAVACODE
void write(Database db, String key, String data) throws Exception {
	theKey = new DatabaseEntry(key.getBytes("UTF-8"));
	theData = new DatabaseEntry(data.getBytes("UTF-8"));
	db.put(null, theKey,theData);
	System.out.println("Write db complete \nkey: " + key + "  /  data: " + data ); // remove later
} 

JAVACODE
String read(Database db, String key) throws SQLException, Exception {
	theKey = new DatabaseEntry(key.getBytes("UTF-8"));
	theData = new DatabaseEntry();
	String foundData; 
	if( db.get(null,theKey,theData, LockMode.DEFAULT) == OperationStatus.SUCCESS ) {
		foundData = new String(theData.getData(), "UTF-8");
	} else {
		throw new SQLException("No record found for key'" + key + "'");
	}
	
	System.out.println("Read db complete \nkey: " + key + "  /  foundData: " + foundData ); // remove later
	return foundData;	
}

//
// Almost every javacode and database manipulation code are positioned 
// upper method of the related method. But some are not. 
//

void Query() throws SQLException, Exception :
{
	Database thisTableDb;
	List<String> tableNameList;
	thisKVHash = new HashMap<String,String>();
}
{
	(
	CreateTable()
	< SEMICOLON >	
	{ 
		thisTableDb = myEnv.setDb(thisTableName, NOT_READONLY);
			
			try {
	            // input column definition into thisColDefHash, key Prefix : @cd:
	            Iterator<Entry<String,String> > colIt = thisColDefHash.entrySet().iterator();
	            while(colIt.hasNext() ){
	                Entry<String,String> nowEntry = colIt.next();
	                String nowKey = nowEntry.getKey();
	                String nowData = nowEntry.getValue();
	                write(thisTableDb, nowKey, nowData);
	            }
	
	            // input foreign key into thisFkDefHash, key Prefix : #fk:
	            Iterator<Entry<String,String> > fkIt = thisFkDefHash.entrySet().iterator();
	            while(fkIt.hasNext() ){
	                Entry<String,String> nowEntry = fkIt.next();
	                String nowKey = nowEntry.getKey();
	                String nowData = nowEntry.getValue();
	                write(thisTableDb, nowKey, nowData);
	            }
	            
	            // input referencing pointer into thisRefingPtHash, key Prefix : !ref->:
	            Iterator<String> refingPtIt = thisRefingPtArr.iterator();
	            while(refingPtIt.hasNext() ){
	                String nowKey = refingPtIt.next();
	                String nowData = " ";
	                write(thisTableDb, nowKey, nowData);
	            }
            } finally {
				thisTableDb.close();
			}
	    
    	//WRITE REFERENCED POINTING HASH INTO EACH TABLES;
    	//source : thisRefedPtHash 
	    	
	    Iterator< Entry<String, ArrayList<String> > > refedPtArrIt = thisRefedPtHash.entrySet().iterator();
            Database nowRefedDb;
            while(refedPtArrIt.hasNext()) {
            	Entry<String, ArrayList<String> > nowEntry = refedPtArrIt.next();
            	String nowRefedTableName = nowEntry.getKey();
            	ArrayList<String> nowRefedPtArr = nowEntry.getValue();
            	
            	try {
            		// case insensitive is already checked in constraint definition sentence
            		 nowRefedDb = myEnv.setDb(nowRefedTableName, NOT_READONLY);
            	} catch(DatabaseNotFoundException dbnfe) {
            		throw new ReferenceTableExistenceError();
            	}
            	
            	try{
            		Iterator<String> refedPtIt = nowRefedPtArr.iterator();
                    while(refedPtIt.hasNext() ){
                    	String nowKey = refedPtIt.next();
                		String nowData = " ";
                        write(nowRefedDb, nowKey, nowData);
                    }
            		
            	} finally {
            		nowRefedDb.close();
            	}
            
            }

		printMessage("'" + thisTableName + "' table is created");
	}
	|
	DropTable()
	< SEMICOLON >	
	{	
		if( thisTableName.equals("all") ) { // remove later
			myEnv.removeDbAll();
			printMessage("All table dropped");
			return;
		} 
	
		tableNameList = myEnv.getDbNames();
		thisTableName = autoCaseModify( tableNameList, thisTableName) ;
	  	if(thisTableName == null) {
  			throw new NoSuchTable();
  		}
		
		// delete thisTableName database
		Database targetDb = myEnv.setDb(thisTableName, NOT_READONLY);
		if( myEnv.hasKindOf(targetDb, REFEDPT_PREFIX) ) {
			throw new DropReferencedTableError(thisTableName);
		} 
		myEnv.removeDb(thisTableName);		
	
		
  		// search the referencing constraint by this db from all database and delete it 
  		tableNameList = myEnv.getDbNames(); // reload
  		for(String nowDbName : tableNameList) {
			Database nowSearchDb = myEnv.setDb(nowDbName, NOT_READONLY);
		
			Cursor cursor = nowSearchDb.openCursor(null,null);
			
			theKey = new DatabaseEntry(REFEDPT_PREFIX.getBytes("UTF-8") );
			theData = new DatabaseEntry();
				
	        try {
		        retVal = cursor.getSearchKeyRange(theKey, theData, LockMode.DEFAULT);
		        while(retVal == OperationStatus.SUCCESS) {
		        	String nowKey = new String(theKey.getData(), "UTF-8");
		        	String nowData = new String(theData.getData(), "UTF-8");
		        	
		        	String[] splited = nowKey.split(" ");
		        	if(REFEDPT_PREFIX.equals(splited[0]) ) {
		        		String objTable = getRefPtPart(nowKey, OBJECT_TABLENAME);
		        		if(thisTableName.equalsIgnoreCase(objTable) ) {
		        			cursor.delete();
		        		}
		        	}
		        	
		        	retVal = cursor.getNext(theKey, theData, LockMode.DEFAULT);
		        }
		        
	        } finally {
	        	cursor.close();
	        	nowSearchDb.close();
	        }
	        
  		}
	  	
		
		printMessage("'" + thisTableName + "' table is dropped" );
		 
	}
	|
	ShowTables()
	< SEMICOLON >
	{
		tableNameList = myEnv.getDbNames();
  		
  		if(tableNameList.size()==0){
  			throw new ShowTablesNoTable();
  		} else {
  			System.out.println("-----------------------------------------------------------");
  			Iterator<String> it = tableNameList.iterator();
  			while(it.hasNext()){
  				System.out.println(it.next());
  			}
  			System.out.println("-----------------------------------------------------------");
  		}
		
	}	
	|
	Desc()
	< SEMICOLON >
	{
    	tableNameList = myEnv.getDbNames();
    	thisTableName = autoCaseModify( tableNameList, thisTableName) ;
	  	if(thisTableName == null) {
  			throw new NoSuchTable();
  		}
  		
    	thisTableDb = myEnv.setDb(thisTableName, READONLY);
	    thisDbCursor = thisTableDb.openCursor(null, null);
	    
	    
        
        try {
	        theKey = new DatabaseEntry(COLDEF_PREFIX.getBytes("UTF-8") );
	        theData= new DatabaseEntry();
	
			System.out.println("-----------------------------------------------------------");
    		System.out.println("table_name [" + thisTableName +"]" );
    		System.out.format("%-24s%-12s%-6s%-8s%n", "column_name", "type", "null", "key");
		
	    	retVal = thisDbCursor.getSearchKeyRange(theKey, theData, LockMode.DEFAULT); 
	        if (retVal != OperationStatus.SUCCESS) {
	        	throw new SQLException("No Column in the table");
	        } else {
	        
		        while ( retVal == OperationStatus.SUCCESS ) {
		        		
		            String nowColDef = new String(theData.getData(), "UTF-8");
		
		            String nowColName = getColDefAttr(nowColDef, COLNAME);
		            String nowColDataType = getColDefAttr(nowColDef, DATATYPE);
		            String nowColNullity = getColDefAttr(nowColDef, NULLITY);
		            String nowColKeyType = getColDefAttr(nowColDef, KEYTYPE);
		            if(nowColKeyType.equals("NOR")) {
		            	nowColKeyType = "";
		            }
		            
		        	System.out.format("%-24s", nowColName);
		        	System.out.format("%-12s", nowColDataType);
		        	System.out.format("%-6s", nowColNullity);
		        	System.out.format("%-8s%n", nowColKeyType);
		        	
		        	retVal = thisDbCursor.getNext (theKey, theData, LockMode.DEFAULT); 
		
		        } 
		        
		       System.out.println("-----------------------------------------------------------");
	        }
	        
    		
    		
    		//remove later
    
			String sData;
			String sKey;
			
			theKey = new DatabaseEntry();
			theData = new DatabaseEntry();
			
			retVal = thisDbCursor.getFirst(theKey, theData, LockMode.DEFAULT);
			
			while(retVal == OperationStatus.SUCCESS) {
				sKey = new String(theKey.getData(), "UTF-8");
				sData = new String(theData.getData(), "UTF-8");
				
				System.out.printf("%-30s      %-50s %n", sKey, sData);
				
				retVal = thisDbCursor.getNext(theKey, theData, LockMode.DEFAULT);
			}
			
			System.out.println("-----------------------------------------------------------");
		
		} finally {
        	thisDbCursor.close();
        	thisTableDb.close();
        }
	}	
	|
	Select()
	< SEMICOLON >	
	|
	Insert()
	< SEMICOLON >
	{
	
		tableNameList = myEnv.getDbNames();
    	thisTableName = autoCaseModify( tableNameList, thisTableName);
	  	if(thisTableName == null) {
  			throw new NoSuchTable();
  		}
		
    	thisTableDb = myEnv.setDb(thisTableName, NOT_READONLY);
	
		try {
		
			thisKVHash = getAllHashFromDb(thisTableDb);
			
			
			//Setup insert column list with two cases.
			//If insColList is obtained by user defined, then check the existence of each column 
			if(insColList.size() ==0) {
				
			} else {
			
			}
			
			//Get primary key column from insColList
			//This column's value will be key for the inserting tuple
			
			
			
			
			
			
			
			
			
  		
  		
  		
        } finally {
        	thisTableDb.close();
        }
    	
    	
    	
    	
    	
    	
    	
	    
	
	
	}	
	|
	Delete()
	< SEMICOLON >	
	)
	
}
















//******************* Create table query *******************//

void CreateTable() throws SQLException, Exception :
{
}
{
  < CREATE > < TABLE > 
  thisTableName = TableName()
  {
  	List<String> tableNameList = myEnv.getDbNames();
  	String existName = autoCaseModify( tableNameList, thisTableName) ;
  	
  	if(existName != null) {
  		throw new TableExistenceError();
  	}
  }
  TableElementList()
}

String TableName() : 
{}
{
	< LEGAL_IDENTIFIER >
	{
		return token.toString();		
	}
}

void TableElementList() throws SQLException, Exception :
{
	pkDefOccur = 0;
	fkDefOccur = 0;
	colDefOccur = 0;
	refedPtOccur = 0;
	refingPtOccur = 0;
	
	thisConstraintHash = new HashMap<String, String>();
	thisColDefHash = new HashMap<String, String>();
	thisFkDefHash = new HashMap<String, String>();
	
	thisRefedPtHash = new HashMap<String, ArrayList<String>  >();
	 
	 
	thisRefingPtArr = new ArrayList<String>();
	thisRefedPtArr = new ArrayList<String>();
	
	
	 
	ArrayList<String> priColList = new ArrayList<String>();
	ArrayList<String> forColList = new ArrayList<String>();
	ArrayList<String> refedColList = new ArrayList<String>();
}
{
	< LEFT_PAREN > 
  
	TableElement()
	(
		< COMMA > 
		TableElement()
	)*
  
	< RIGHT_PAREN >
  
}

void TableElement() throws SQLException, Exception :
{} 
{
 	ColumnDefinition()
	|
	TableConstraintDefinition() 
}

void ColumnDefinition() throws SQLException  :
{
	String colDef;
	String colName; 
	String dt;
	String nullable;
	String key;
}
{
	colName = ColumnName() 
	dt = DataType() 
	( nullable = NotNull() )?
  
	{
		String[] searched = getConstraintWithName(thisColDefHash, COLDEF_PREFIX, colName); 
		
		if(searched != null) {
			throw new DuplicateColumnDefError();
		} 
		
		colDefOccur++;		
		nullable = "Y";		
		key = "NOR";
		
		String colDefKey = mergeToConstraintKey(COLDEF_PREFIX, colDefOccur, colName);
		colDef = mergeToColDef(colName,dt,nullable,key);
		setConstraint(thisColDefHash, colDefKey, colDef); 
	}	 
}

String NotNull() :
{}
{
	< NOT > < NULL >
	{ return "N"; } 
}

String ColumnName() : 
{}
{
	< LEGAL_IDENTIFIER >
	{
		return token.toString();		
	}  
}

String DataType() throws SQLException :
{
	int charLen;
}
{
	< INT >
	{ return "int"; }
	|
	< CHAR > 
	< LEFT_PAREN >  
	< INT_VALUE >
	{ 
		charLen = Integer.parseInt( token.toString() );
		if ( charLen < 1 ) {
			throw new CharLengthError();
		} 
	}
	< RIGHT_PAREN >
	{ return new String("char("+charLen+")"); }
	|
	< DATE >
	{ return "date"; }
}



void TableConstraintDefinition() throws SQLException, Exception :
{}
{
	PrimaryKeyConstraint()
	|
	ReferentialConstraint()
}

void PrimaryKeyConstraint() throws SQLException :
{}
{
	< PRIMARY > < KEY > 
	priColList = ColumnNameList()
	{
		pkDefOccur++;
		if(pkDefOccur > 1){
			throw new DuplicatePrimaryKeyDefError();
		}
		
		// case modifying primary column name list 
		for(int i=0; i<priColList.size(); i++) {
			String nowPriCol = priColList.get(i);
			String[] searched = getConstraintWithName(thisColDefHash, COLDEF_PREFIX, nowPriCol); 
		
			if(searched == null) {
				throw new NonExistingColumnDefError(nowPriCol);
			} else {
				priColList.set(i,searched[1] );
			} 
		}
		
		
		// setting key type to foreign key type
		for (String itStr : priColList) {
			String[] searched = getConstraintWithName(thisColDefHash, COLDEF_PREFIX, itStr);
			
			int cId = Integer.parseInt(searched[0]);
			String colName = searched[1];
			String colDef = searched[2];
			
			//set key type
			String kt = getColDefAttr(colDef, KEYTYPE);
			if(kt.equals("FOR") ) {
				colDef = modifyColDefAttr(colDef, KEYTYPE, "PRI/FOR");
			} else if (kt.equals("NOR") ) {
				colDef = modifyColDefAttr(colDef, KEYTYPE, "PRI");
			}
			
			//set nullity as not null
			colDef = modifyColDefAttr(colDef, NULLITY, "N");
			
			String colDefKey = mergeToConstraintKey( COLDEF_PREFIX, cId, colName );
			setConstraint(thisColDefHash, colDefKey, colDef); 
		}
	}
}

void ReferentialConstraint() throws SQLException, Exception :
{	
	Database refedDb = null;
	Cursor refedDbCursor = null;	
	
	thisRefedPtArr = new ArrayList<String>();
	
	ArrayList<String> refedColDefList = new ArrayList<String>();
	HashMap<String, String> refedTableColDefHash = new HashMap<String, String>();
	
}
{
	< FOREIGN > < KEY > 
	forColList = ColumnNameList() 
	< REFERENCES > 
	refedTableName = TableName() 
	refedColList = ColumnNameList()
	
	{
	
		// 1. read all column definition from referenced database
		try {
			refedDb = myEnv.setDb(refedTableName, READONLY);
			refedTableColDefHash = getHashKindOf( getAllHashFromDb(refedDb), COLDEF_PREFIX);
		} finally {				
			refedDb.close();
		}
		
		
		// 2. case modifying part
		for(int i=0; i<forColList.size(); i++) {
			String nowForCol = forColList.get(i);
			String[] searched = getConstraintWithName(thisColDefHash, COLDEF_PREFIX, nowForCol); 
			if(searched == null) { throw new NonExistingColumnDefError(nowForCol); } 
			else { forColList.set(i,searched[1] ); } 
		}
		
		{
			List<String> tableNameList = myEnv.getDbNames();
	  		refedTableName = autoCaseModify( tableNameList, refedTableName) ;
		  	if(refedTableName == null) { throw new ReferenceTableExistenceError(); }
		}
		
		for(int i=0; i<refedColList.size(); i++) {
			String nowRefedCol = refedColList.get(i);
			String[] searched = getConstraintWithName(refedTableColDefHash, COLDEF_PREFIX, nowRefedCol); 
			if(searched == null) { throw new ReferenceColumnExistenceError(); } 
			else { refedColList.set(i,searched[1] ); } 
		}
		

		// 3. error throwing part
		if ( forColList.size() != refedColList.size() ) {
			throw new ReferenceTypeError();
		} else if ( thisTableName.equalsIgnoreCase(refedTableName) ) {
			throw new SelfReferencingError();
		} else if (thisRefedPtHash.containsKey(refedTableName)) { 
			throw new DuplicatedReferenceTableError(); // Let assume foreign key references other key only once.  
		}
		
		
		
		// 4. check referential constraint
		for(int i=0; i<forColList.size(); i++) {
			String nowForColName = forColList.get(i);
			String[] searchedFor = getConstraintWithName(thisColDefHash, COLDEF_PREFIX, nowForColName);
			int nowForCorId = Integer.parseInt(searchedFor[0]);
			String nowForColDef = searchedFor[2];
			String nowForColDt = getColDefAttr(nowForColDef, DATATYPE);
			
			String nowRefedColName = refedColList.get(i);
			String[] searchedRefed = getConstraintWithName(refedTableColDefHash, COLDEF_PREFIX, nowRefedColName);
			int nowRefedColId = Integer.parseInt(searchedRefed[0]);
			String nowRefedColDef = searchedRefed[2];
			String nowRefedColDt = getColDefAttr(nowRefedColDef, DATATYPE);
			String nowRefedColKt = getColDefAttr(nowRefedColDef, KEYTYPE);
			
			if( !nowRefedColDt.equals( nowForColDt ) ) {
				throw new ReferenceTypeError();
			}
			
			if(!nowRefedColKt.equals("PRI") && !nowRefedColKt.equals("PRI/FOR") ) {
				throw new ReferenceNonPrimaryKeyError();
			} 
		}
		
		
		fkDefOccur++;
		

        // 5. setup reference relationship
        // 1) input into forKeyHash 
        // 2) update thisColDefHash's KeyType info 
        // 3) input thisRefingPt into thisRefingPtArr 
        // 4) input thisRefedPt into thisRefedPtArr 
        // 5) input thisRefedPtArr into thisRefedTableHash with refedTableName 

        // 1) input into forKeyHash
		
		// "null" for key name
		String fkDefKey = mergeToConstraintKey( FORKEY_PREFIX, fkDefOccur, "null");
		String fkDef = mergeToFKDef(forColList, refedTableName, refedColList);
		setConstraint(thisFkDefHash, fkDefKey, fkDef); 
		
		// 2) 3) 4)
        for(int i=0; i<forColList.size(); i++ ) {
			String nowRefingColName = forColList.get(i) ;
            String nowRefedColName = refedColList.get(i);

            // 2) update thisColDefHash's KeyType info
            
            String[] searchedRefing = getConstraintWithName(thisColDefHash, COLDEF_PREFIX, nowRefingColName);
            
            int nowRefingColId = Integer.parseInt(searchedRefing[0]);
            String nowRefingColDef = searchedRefing[2];
            
            String kt = getColDefAttr(nowRefingColDef, KEYTYPE);
            if(kt.equals("PRI") ) {
				nowRefingColDef = modifyColDefAttr(nowRefingColDef, KEYTYPE, "PRI/FOR");
			} else if (kt.equals("NOR") ) {
				nowRefingColDef = modifyColDefAttr(nowRefingColDef, KEYTYPE, "FOR");
			}
			
			String nowRefingColDefKey = mergeToConstraintKey(COLDEF_PREFIX, nowRefingColId, nowRefingColName);
			setConstraint(thisColDefHash, nowRefingColDefKey, nowRefingColDef);

            // 3) input thisRefingPt into thisRefingPtArr
			String nowRefingPt = mergeToRefPt(REFINGPT_PREFIX, nowRefingColName, refedTableName, nowRefedColName);
			thisRefingPtArr.add(nowRefingPt);
			
            
			// 4) input thisRefedPt into thisRefedPtArr
			String nowRefedPt = mergeToRefPt(REFEDPT_PREFIX, nowRefedColName, thisTableName, nowRefingColName);
			thisRefedPtArr.add(nowRefedPt);
			
        }
        
        // 5) input thisRefedPtArr into thisRefedTableHash with refedTableName
        thisRefedPtHash.put(refedTableName, thisRefedPtArr);
	  	
 	 }
}

ArrayList<String> ColumnNameList() :
{
	ArrayList<String> colNameList = new ArrayList<String>();
	String colName;
}
{
	< LEFT_PAREN > 
	colName = ColumnName()
	{
		colNameList.add(colName);
	}
	(
		< COMMA > 
		colName = ColumnName()
		{
			colNameList.add(colName);
		}
	)*
  
	< RIGHT_PAREN >
	{
		return colNameList;
	}
  
}






//******************* Drop table, show tables, desc query *******************//

void DropTable() :
{}
{
	< DROP > < TABLE >
	thisTableName = TableName()
}

void ShowTables() :
{}
{
	< SHOW > < TABLES >
}

void Desc() :
{}
{
	< DESC >
	thisTableName = TableName()
}





































































//******************* Select query *******************//

void Select() :
{}
{
	< SELECT >
	SelectList()
	TableExpression()
}

void SelectList() :
{}
{
	< STAR >
	|
	SelectedColumn()
	(
	  < COMMA > SelectedColumn()
	)*

}
void SelectedColumn() :
{}
{
	ColumnReference()
	(
	  < AS >
	  ColumnName()
	)?

}

void ColumnReference() :
{}
{
	(
		LOOKAHEAD(TableName() < PERIOD >)
		TableName()
		< PERIOD >
	)?
		ColumnName()
}


void TableExpression() :
{}
{
	FromClause()
	(
		WhereClause()
	)?
}

void FromClause() :
{}
{
	< FROM >
	TableReferenceList()
}

void TableReferenceList() :
{}
{
	ReferedTable()
	(
		< COMMA > ReferedTable()
	)*
}

void ReferedTable() :
{}
{
	TableName()
	(
  		< AS >
    	TableName()
	)?

}

void WhereClause() :
{}
{
	< WHERE >
	BooleanValueExpression() 
}

void BooleanValueExpression() :
{}
{
	BooleanTerm()
	(
		< OR >
		BooleanTerm()
	)*
}


void BooleanTerm() :
{}
{
    BooleanFactor()
	(
	< AND >
	BooleanFactor()
	)*
}

void BooleanFactor() :
{}
{
    (< NOT >)? BooleanTest()
}

void BooleanTest() :
{}
{
    Predicate()
	|
	ParenthesizedBooleanExpression()
}

void ParenthesizedBooleanExpression() :
{}
{
	< LEFT_PAREN > 
	
	BooleanTerm()
	(
	< OR >
	BooleanTerm()
	)*

	< RIGHT_PAREN >
}

void Predicate() :
{}
{
	LOOKAHEAD( CompOperand() < COMP_OP > ) 
    ComparisonPredicate()
	|
	NullPredicate()
}

void ComparisonPredicate() :
{}
{
    CompOperand()
    < COMP_OP >
    CompOperand()
}

void CompOperand() :
{}
{
    ComparableValue()
	|
	ColumnReference()
}


String ComparableValue () :
{}
{
    < INT_VALUE >
    { return token.toString(); }
    |
    < CHAR_STRING >
    { return token.toString(); }
    |
    < DATE_VALUE >
    { return token.toString(); }
}

void NullPredicate() :
{}
{
	(
	LOOKAHEAD( TableName() < PERIOD > ) 
    TableName() < PERIOD >
    )?
    ColumnName()
    NullOperation()
}

void NullOperation() :
{}
{
    < IS >
    ( < NOT > )?
    < NULL >
}


































//******************* Insert, Delete query *******************//

void Insert() throws SQLException :
{}
{
	< INSERT > < INTO >
	thisTableName = TableName()
	InsertColumnsAndSource()
}

void InsertColumnsAndSource() throws SQLException :
{
	insColList = new ArrayList<String>();
	insValList = new ArrayList<String>();
	
}
{
	(
		insColList = ColumnNameList()
	)?
	insValList = ValueList()
	{
		if(insColList.size() != 0) {
			if(	insColList.size() != insValList.size() ) {
				throw new InsertTypeMismatchError();
			} 
		}
	}
}

ArrayList<String> ValueList() :
{
	String val;
}
{
	< VALUES >
	<LEFT_PAREN> 
	val = Value()
	{
		insValList.add(val);
	} 
	(
		<COMMA> 
		val = Value()
		{
			insValList.add(val);
		}
		
	)*
	< RIGHT_PAREN >
	{
		return insValList;
	}
	
}

String Value() :
{
	String cValue;
}
{
	< NULL >
	{ return null;}
	|
	cValue = ComparableValue()
	{ return cValue; }
}





void Delete() :
{}
{
	< DELETE > < FROM >
	thisTableName = TableName()
	(
	WhereClause()
	)?
}



  
  


